AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template creates an entire network with VPC, 2 public subnets and 2 private subnets, 
  an ELB SG, Webservers SG and Database SG.
  Outputs gives Vpc Id, Subnets Id, and SG Ids. 
  --AWSMP::30ba0dc2-ba4a-48e4-a40c-cca1b4acf476::NEWGUID
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Networking configuration
        Parameters:
          - SSHKeyName
          - IPRangeSSH
          - IPRangeApplication
          - AvailabilityZone
          - SecondAvailabilityZone
    ParameterLabels:
      SSHKeyName:
        default: SSH key name
      IPRangeSSH:
        default: SSH source
      IPRangeApplication:
        default: Application source
      AvailabilityZone:
        default: Availability zone
      SecondAvailabilityZone:
        default: Additional Availability Zone
Parameters:
  SSHKeyName:
    Description: '[Required] SSH key name.'
    Type: 'AWS::EC2::KeyPair::KeyName'
    AllowedPattern: .+
    ConstraintDescription: Your SSH Key cannot be blank. Please add an SSH key to the application.
  IPRangeSSH:
    Description: >-
      [Required] Set the IP or IP range for SSH connectivity to instances ;
      192.0.0.1/32 is configured by default to disable remote SSH access. Set
      this to 0.0.0.0/0 to access secure shell from any IP.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.0.0.1/32
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: Your IP Range for SSH must be a valid IP CIDR range of the form x.x.x.x/x.
  IPRangeApplication:
    Description: >-
      [Required] Set this to 0.0.0.0/0 to allow anyone on the internet to access
      the application, and 192.0.0.1/32 to disable public access to the
      application. You can also configure specific IP address or IP Range access
      here.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})$'
    ConstraintDescription: >-
      This value cannot be empty. Set this to 0.0.0.0/0 to allow anyone on the
      internet to access the application, and 192.0.0.1/32 to disable public
      access to the application.
  AvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: '[Required] Primary Availability Zone for your deployment.'
    AllowedPattern: ^.+$
    ConstraintDescription: The Availability Zone cannot be blank.
  SecondAvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: >-
      [Required] This RDS deployment requires two availability zones. You must
      select the Additional Availability Zone to be different than the Primary
      Availability Zone.
    AllowedPattern: ^.+$
    ConstraintDescription: The Additional Availability Zone cannot be blank.
Conditions:
  AlwaysTrue: !Equals 
    - true
    - true
  AddIPRangeSSH: !Not 
    - !Equals 
      - !Ref IPRangeSSH
      - ''
  AddIPRangeApplication: !Not 
    - !Equals 
      - !Ref IPRangeApplication
      - ''
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 192.168.0.0/16
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 192.168.0.0/23
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId: !Ref Vpc
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 192.168.2.0/23
      AvailabilityZone: !Ref SecondAvailabilityZone
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId: !Ref Vpc
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: Vpc
    Properties:
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn: InternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId: !Ref Vpc
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 192.168.4.0/23
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Private
          Key: Network
      VpcId: !Ref Vpc
  Natgateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIP
         - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: AFGnatgw
  EIP:
   DependsOn: Vpc
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc
  PrivateRoute:
   Type: AWS::EC2::Route
   Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Natgateway
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Public
          Key: Network
      VpcId: !Ref Vpc
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  SharedSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for the internal communications
      SecurityGroupIngress: []
      VpcId: !Ref Vpc
  SharedSecurityGroupIngress0:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: SharedSecurityGroup
    Properties:
      IpProtocol: '-1'
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId: !GetAtt 
        - SharedSecurityGroup
        - GroupId
      GroupId: !GetAtt 
        - SharedSecurityGroup
        - GroupId
  SecondPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 192.168.6.0/23
      AvailabilityZone: !Ref SecondAvailabilityZone
      Tags:
        - Value: !Ref 'AWS::StackName'
          Key: Application
        - Value: Private
          Key: Network
      VpcId: !Ref Vpc
  SecondPrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SecondPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ELB security group
      SecurityGroupIngress:
        - !If 
          - AddIPRangeSSH
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref IPRangeSSH
          - 'AWS::NoValue'
        - !If 
          - AddIPRangeApplication
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - 'AWS::NoValue'
        - !If 
          - AddIPRangeApplication
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - 'AWS::NoValue'
      VpcId: !Ref Vpc
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for the instances
      SecurityGroupIngress: []
      VpcId: !Ref Vpc
  InstanceSecurityGroupIngress0:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: InstanceSecurityGroup
    Properties:
      IpProtocol: '-1'
      FromPort: '80'
      ToPort: '80'
      SourceSecurityGroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
      GroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
  AFGLaunchSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ASG instances security group
      SecurityGroupIngress: []
      VpcId: !Ref Vpc
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Database instance security group
      SecurityGroupIngress: []
      VpcId: !Ref Vpc
  WebserverSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP, HTTPS ingress only from ELB
      VpcId: !Ref Vpc  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref AFGLaunchSecurityGroup             
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref AFGLaunchSecurityGroup
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref DatabaseSecurityGroup   
Outputs:
  VpcId:
    Description: AFGVPC
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  PublicSubnet1:
    Description: PublicSubnet1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnet1ID'
  PublicSubnet2:
    Description: PublicSubnet2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PubSubnet2ID'
  PrivateSubnet:
    Description: PrivateSubnet
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub '${AWS::StackName}-PriSubnetID'
  SecondPrivateSubnet:
    Description: SecondPrivateSubnet
    Value: !Ref SecondPrivateSubnet
    Export:
      Name: !Sub '${AWS::StackName}-SecondPriSubnetID'
  ELBSecurityGroup:
    Description: ELBSecurityGroup
    Value: !Ref ELBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ELBSecurityGroup'
  WebserverSecurityGroup:
    Description: AFGWebserverSecurityGroup
    Value: !Ref WebserverSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupWeb'
  DatabaseSecurityGroup:
    Description: DatabaseSecurityGroup
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupDB'
  SharedSecurityGroup: 
    Description: Internal Communication SecurityGroup
    Value: !Ref SharedSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SharedSecurityGroup'  
  AFGLaunchSecurityGroup:
    Description: LaunchConfiguration SG
    Value: !Ref AFGLaunchSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-AFGLaunchSecurityGroup'  